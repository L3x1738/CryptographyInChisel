package AES128

import chisel3._
import chiseltest._
import org.scalatest.flatspec.AnyFlatSpec

class AESUnitTest extends AnyFlatSpec with ChiselScalatestTester {
  behavior of "AES"

  it should "match NIST FIPS-197 AES-128 vector" in {
    test(new AES()) { dut =>
      //val pt = Array(0x00,0x11,0x22,0x33, 0x44,0x55,0x66,0x77, 0x88,0x99,0xaa,0xbb, 0xcc,0xdd,0xee,0xff)
      //val ct = Array(0x69,0xc4,0xe0,0xd8, 0x6a,0x7b,0x04,0x30, 0xd8,0xcd,0xb7,0x80, 0x70,0xb4,0xc5,0x5a)
      val pt = Array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
      val ct = Array(0xc6, 0xa1, 0x3b, 0x37, 0x87, 0x8f, 0x5b, 0x82, 0x6f, 0x4f, 0x81, 0x62, 0xa1, 0xc8, 0xd8, 0x79)
      for (i <- 0 until 16) dut.io.blockIn(i).poke(pt(i).U)

      // start pulse
      dut.io.start.poke(true.B); dut.clock.step(); dut.io.start.poke(false.B)

      // așteaptă done (<= 20 cicluri)
      var cycles = 0
      while (!dut.io.done.peek().litToBoolean && cycles < 40) {
        dut.clock.step(); cycles += 1
      }
      assert(dut.io.done.peek().litToBoolean, s"Nu a terminat în $cycles cicluri")

      for (i <- 0 until 16) dut.io.blockOut(i).expect(ct(i).U)
    }
  }
}